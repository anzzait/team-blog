{"version":3,"file":"component---src-pages-index-js-8228721ad81cde4fa7ee.js","mappings":"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","sources":["webpack://anzzawiki/./src/components/Seo/Seo.js","webpack://anzzawiki/./src/hooks/use-site-metadata.jsx","webpack://anzzawiki/./src/components/article-preview.js","webpack://anzzawiki/./src/components/article-preview.module.css","webpack://anzzawiki/./src/pages/index.js"],"sourcesContent":["import React from 'react';\nimport { useSiteMetadata } from '../../hooks/use-site-metadata';\n\n\nconst Seo = ({ title, description, pathname, children }) => {\n  \n  const { title: defaultTitle, description: defaultDescription, image, siteUrl, type, keywords } = useSiteMetadata()\n\n  const seo = {\n    // title: `${title} | ${defaultTitle}` || defaultTitle,\n    title: title ? `${title} | ${defaultTitle}` : defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}/${image}`,\n    url: `${siteUrl}${pathname || ``}`,\n    type: `${type}`,\n    keywords: `${keywords}`,\n  };\n\n  return (\n    <>\n      <title>{seo.title}</title>\n      <meta httpEquiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      <meta name=\"keywords\" content={seo.keywords}/>\n\n      {/* Open Graph Protcol */}\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:type\" content={seo.type} />\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:site_name\" content={seo.title} />\n      <meta property=\"og:image\" content={seo.image} />\n\n      {/* Twitter Card Meta Tags */}\n      <meta name=\"twitter:card\" content={seo.image} />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      {children}\n    </>\n  );\n};\n\nexport default Seo;\n\n","import { graphql, useStaticQuery } from \"gatsby\"\n\nexport const useSiteMetadata = () => {\n  const data = useStaticQuery(graphql`\n    query FetchMetadata{\n      site {\n        siteMetadata {\n          title\n          description\n          image\n          siteUrl\n          type\n          keywords\n        }\n      }\n    }\n  `)\n\n  return data.site.siteMetadata\n}","import React from 'react'\nimport { Link } from 'gatsby'\nimport { GatsbyImage } from 'gatsby-plugin-image'\nimport { renderRichText } from 'gatsby-source-contentful/rich-text'\n\nimport Container from './container'\nimport Tags from './tags'\nimport * as styles from './article-preview.module.css'\n\nconst ArticlePreview = ({ posts }) => {\n  if (!posts) return null\n  if (!Array.isArray(posts)) return null\n\n  return (\n    <Container>\n      <ul className={styles.articleList}>\n        {posts.map((post) => {\n          return (\n            <li key={post.slug}>\n              <Link to={`/blog/${post.slug}`} className={styles.link}>\n                <GatsbyImage alt=\"\" image={post.heroImage.gatsbyImage} />\n                <h2 className={styles.title}>{post.title}</h2>\n              </Link>\n              <div>\n                {post.description?.raw && renderRichText(post.description)}\n              </div>\n              <div className={styles.meta}>\n                <small className=\"meta\">{post.publishDate}</small>\n                <Tags tags={post.tags} />\n              </div>\n            </li>\n          )\n        })}\n      </ul>\n    </Container>\n  )\n}\n\nexport default ArticlePreview\n","// extracted by mini-css-extract-plugin\nexport var articleList = \"article-preview-module--article-list--a632f\";\nexport var link = \"article-preview-module--link--1e0ea\";\nexport var meta = \"article-preview-module--meta--1cf85\";\nexport var title = \"article-preview-module--title--bc587\";","import React from 'react'\nimport { graphql } from 'gatsby'\nimport get from 'lodash/get'\n\nimport Layout from '../components/layout'\nimport Hero from '../components/hero'\nimport ArticlePreview from '../components/article-preview'\n\nimport Seo from '../components/Seo';\n\nclass RootIndex extends React.Component {\n  render() {\n    const posts = get(this, 'props.data.allContentfulBlogPost.nodes')\n    const [author] = get(this, 'props.data.allContentfulPerson.nodes')\n\n    return (\n      <Layout location={this.props.location}>\n        <Hero\n          image={author.heroImage.gatsbyImage}\n          title={author.name}\n          content={author.shortBio}\n        />\n        <ArticlePreview posts={posts} />\n      </Layout>\n    )\n  }\n}\n\nexport default RootIndex\n\nexport const pageQuery = graphql`\n  query HomeQuery {\n    allContentfulBlogPost(sort: { publishDate: DESC }) {\n      nodes {\n        title\n        slug\n        publishDate(formatString: \"MMMM Do, YYYY\")\n        tags\n        heroImage {\n          gatsbyImage(\n            layout: FULL_WIDTH\n            placeholder: BLURRED\n            width: 424\n            height: 212\n          )\n        }\n        description {\n          raw\n        }\n      }\n    }\n    allContentfulPerson(\n      filter: { contentful_id: { eq: \"15jwOBqpxqSAOy2eOO4S0m\" } }\n    ) {\n      nodes {\n        name\n        shortBio {\n          raw\n        }\n        title\n        heroImage: image {\n          gatsbyImage(layout: CONSTRAINED, placeholder: BLURRED, width: 1180)\n        }\n      }\n    }\n  }\n`\n\nexport const Head = () => {\n  return <Seo pathname={'/'} />\n}"],"names":["_ref","title","description","pathname","children","defaultTitle","defaultDescription","image","siteUrl","type","keywords","useStaticQuery","site","siteMetadata","seo","url","React","httpEquiv","content","name","property","posts","Array","isArray","Container","className","map","post","_post$description","key","slug","Link","to","GatsbyImage","alt","heroImage","gatsbyImage","raw","renderRichText","publishDate","Tags","tags","RootIndex","render","get","this","author","Layout","location","props","Hero","shortBio","ArticlePreview","Head","Seo"],"sourceRoot":""}